package com.nova.app.branch;

import com.nova.app.account.BankAccount;
import com.nova.app.account.CurrentAccount;
import com.nova.app.account.SavingAccount;
import com.nova.app.constant.Constants;
import com.nova.app.model.Customer;
import lombok.Getter;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents a branch of a bank. It keeps track of all the
 * customers and bank accounts that are created in that specific bank account. It is uniquely
 * identified by its branchId that is generated by the HeadOffice.
 */
@Getter
@Setter
public class Branch {
    private List<BankAccount> bankAccounts;
    private List<Customer> customers;
    private String branchId;

    private Logger logger = LoggerFactory.getLogger(Branch.class);

    public Branch(String branchId) {
        this.branchId = branchId;
        this.bankAccounts = new ArrayList<>();
        this.customers = new ArrayList<>();
    }

    /**
     * It creates new BankAccount for a customer whose PAN number is equal to the panNumber
     * attribute and the currentBalance in the account is set to the amount.
     * If a customer with given panNumber does not exist in the list of customers of this branch,
     * then a new customer is created and added to the list of customers of this branch.
     *
     * @param panNumber
     * @param type
     * @param amount
     *
     * @return
     */
    public Customer createBankAccount(String panNumber, String type, Double amount) throws Exception {
        logger.debug("createBankAccount method started execution");
        if (type == null || type.isEmpty() || panNumber == null || panNumber.isEmpty() || amount <= 0
                || panNumber.length() != 10) {
            throw new Exception("Please give valid value for panNumber,type and amount");
        }
        Customer customer;
        try {
            customer = getCustomerByPan(panNumber);
        } catch (Exception ex) {
            customer = new Customer(panNumber);
            this.customers.add(customer);
        }

        BankAccount bankAccount = getBankAccount(type);
        if (bankAccount == null) {
            throw new Exception("Please give valid value for type. It can be either Saving or Current.");
        }
        bankAccount.setAccountNumber(getAccountNumber() + "");
        bankAccount.setCurrentBalance(amount);
        customer.getBankAccounts().add(bankAccount);

        logger.debug("createBankAccount method ended execution");
        return customer;
    }

    /**
     * The account number of the recently-added customer is equal to one
     * greater than the account number of the last account created by this branch. The account number
     * of the first account is 1 and of the second account is 2 and so on.
     *
     * @return
     */
    private int getAccountNumber() {
        logger.debug("getAccountNumber method ended execution");
        int size = this.bankAccounts.size();
        if (size == 0) {
            return 1;
        }
        String account = this.bankAccounts.get(size - 1).getAccountNumber();
        logger.debug("getAccountNumber method ended execution");
        return Integer.parseInt(account) + 1;
    }

    /**
     * The SavingAccount is created if the type is equal to Saving and a CurrentAccount is created
     * if the type is equal to Current. If a customer with the given panNumber already exists in this branch,
     * then this account is added to the customer's list of bank accounts.
     *
     * @param type
     *
     * @return
     */
    private BankAccount getBankAccount(String type) {
        logger.debug("getBankAccount method ended execution");
        if (Constants.SAVING.equalsIgnoreCase(type)) {
            return new SavingAccount();
        } else if (Constants.CURRENT.equalsIgnoreCase(type)) {
            return new CurrentAccount();
        } else {
            return null;
        }
    }

    /**
     * It returns a Customer whose PAN number equal to
     * the panNumber attribute. If no such customer exists, then an exception is raised.
     *
     * @param panNumber
     *
     * @return
     */
    public Customer getCustomerByPan(String panNumber) throws Exception {
        logger.debug("getCustomerByPan method ended execution");

        for (Customer customer : this.customers) {
            if (customer.getPanNumber().equalsIgnoreCase(panNumber)) {
                return customer;
            }
        }
        throw new Exception("This is an invalid pan number");
    }

    /**
     * It returns a BankAccount whose
     * account number is equal to accountNumber attribute. If no such account exists, then an
     * exception is raised.
     *
     * @param accountNumber
     *
     * @return
     */
    public BankAccount getAccountByAccountNumber(String accountNumber) throws Exception {
        logger.debug("getAccountByAccountNumber method ended execution");

        for (BankAccount bankAccount : this.bankAccounts) {
            if (bankAccount.getAccountNumber().equalsIgnoreCase(accountNumber)) {
                return bankAccount;
            }
        }
        throw new Exception("This is an invalid account number");
    }
}
